---
layout: post
title: Display concerns in web applications with AngularJs.
summary: nothing
categories: [Angular, JavaScript, Programming]
---

A common need for any application is the need to format data for human consumption.

For example display the name of a person.

You will usually want to use some common form across the application, ex:

<pre><code>

  Hernan Garcia

  Mr. Hernan Garcia

  Garcia, Hernan

</code></pre>


Or some other variation.

h3. One type of problem

Hopefully your application is saving each of the tokens needed to display the name in a different property. You have a salutation or tile property, a first name and a last name properties.

You may be tempted to call the different properties in order in each place that you need to display the name. While this works, you will be duplicating the code all over your views.

Imagine that tomorrow the business (or a change on design) makes necessary change the way you display the name.

If you come from an OO background you may be tempted to add a method to the Person model that use the properties and concatenate them in the proper order.

This will solve the duplication problem and future changes are easy to make.

I don't like this approach, since it's given the model responsibilities that don't belong there.

The view is responsible for the way things are shown.

Even if we ignore separation of concerns (please don't), we are introducing another problem. We removed the possibility of styling each parts of the name in different ways, since we are returning one string.

h3. A solution.

A name component.

If we are using Angular we can easily create a name directive that takes an object that respond to the interface previously described.

__That is the object have a title, firstName and lastName properties__

We can use that directive in every place we need to display a name. We can even make the directive "intelligent" and provide a format token if we want/need to display the name in different ways.

__Or we can load different templates in the directive__

We keep all the styling flexibility and our models know nothing about representation.

h3. A different problem

Another common problem is the need to display an icon or image as part of some data. Let's assume we have an event and we want to display different icons for movie, theater or concerts.
We can also have some events with a custom icon.

Our code needs to check if a custom icon exist and if not the type of event. There is a third possibility and is that the type of event is not set (for whatever reason), in that case we want to display a generic event icon.

Let's assume the model looks something like this

<pre><code>

    var event = {
      type: "",
      icon_url: ""
    };

</code></pre>

One solution could be that once the event is saved, we check if icon_url is set. If it was we are golden if not we check if type was set, if not we set icon_url to the URL of the default event icon. If type is set we can set icon_url to the URL of the type.

__We can assume that the icons for the different types follow some convention so generating the URL is easy.__

This will work very well and now the view only concern is to bind to icon_url.

Besides the previously stated problem of lack of separation of concerns, there is an obvious maintenance problem.

While we can assume that the custom icons will not change after, we can easily foresee a time when the generic icon and the convention based type icons will change.

That change may required update all the records in the database that are affected by the change. In this is something you may want to avoid.

__Imagine your site is really successful and now you need to update several million records because of a visual design decision.__


h3. A solution

You can easily resolve this problem going the directive approach, or you can delegate the work into a service or even further up to the controller.

The service has the advantage that if you need to reuse the code in others controller you just call the service, give it the object and get back a URL.

h3. Conclusion

You controllers in angular (like in any other MV* framework/architecture) should be very small and relatively simple.
Since we don't have reach models in Angular we should rely heavily in both services and directives, prioritizing directives to deal with view/display concerns.

Services should manipulate data, facilitate cross controller communication and back end interaction.
Angular is ideal to embrace a more functional approach and think of your application in a more functional way.