---
layout: post
title: Rake task arguments are not hashes.
summary: Hope this may save some time to somebody out there.
categories: [Ruby, Programming]
---

I was creating a rake task today that take some arguments from the command line and I wanted to use those arguments to create an object.

I needed to merge the given arguments with some generated values inside the task so the code originally looked something like this.

<pre><code>
    task :create, [:first_name, :last_name, :email] => :environment do |t, args|
        args.merge!({seed: generate_password})
        user = User.create(args)
        p user
    end
</code></pre>

After running the task the User was created with no information at all!

After verifying that <span class="code">args</span> had the proper values I did a quick test and noticed that <span class="code">merge!</span> on <span class="code">args</span> didn't work, printing <span class="code">args</span> it looked like a hash but inspecting the type I noticed that is not a simple hash but a <span class="code">"Rake::TaskArguments":http://rake.rubyforge.org/classes/Rake/TaskArguments.html</span> and there is not <span class="code">merge</span> method.

I have been using task arguments for some time now but I guess I never had to do this before. I would expect calling merge to raise an exception and not fail silently.

I didn't look into the implementation of the class (the actual code) but in the documentation it looks like <span class="code">method_missing</span> will delegate to a protected <span code="class">look_up</span> method that will check for the existence of a key in the internal hash, ENV or parent object and silently fail otherwise.

The fix is simple, since <span class="code">Rake::TaskArguments</span> has a <span class="code">to_hash</span> method.
The revisited code looks like this.

<pre><code>
    task :create, [:first_name, :last_name, :email] => :environment do |t, args|
        opts = args.to_hash.merge({seed: generate_password})
        user = User.create(opts)
        p user
    end
</code></pre>

I hope this can save somebody a few minutes of their time.