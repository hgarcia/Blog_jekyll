---
layout: post
title: Shipping as the measure of success.
summary: A not very articulate collection of thoughts on shipping, architecture and development practices.
categories: [Process]
published: false
---

I was recently thinking on the different projects I worked so far in my career.
I was trying to weight the success rate of those projects.

The motivation behind the exercise was to understand my personal evolution as a software developer in relation with the development practices I have been using and adopting during the last 14 years.

__I consider a project successful if the code gets into production on a reasonable amount of time, people start using it to solve the problem it was designed to solve and it actually solves it.__

The first thing I discovered is that most projects I was involved with can be considered to be successful. I was surprised by it, specially due to the industry metrics. I guess I was lucky.

In some of those projects I was a factor for the success of the project, but in most cases was a team effort and my particular contributions was of equal importance to every body else involved.

h3. No many things in common.

I couldn't find many similarities in the projects.
On the technology side of things, they were all over the place.

On the web side of things alone most projects involved some of the following.
Classic ASP, PHP (4 and 5), ASP.NET Web forms, JSP, Spring, Cold-fusion, ASP.NET MVC, Rails, and node.js, with a pinch or PERL to spice things up a bit.
On the desktop side I primarily used VB (6 and .Net), C# and some Java.

Methodology wise they varied almost as much. On my earlier projects the use of testing was mainly an after the fact thought. On my later projects, we use TDD and / or BDD with different levels of rigor, some type of pair programming and Continuous Integration.

Some projects were the product of a solo effort or in collaboration with a designer. Other projects involved multiple teams, across multiple time zones.

h3. What went wrong on the failed ones.

I can easily identify a common problem with the failed projects. Over engineering, over planning, under (or late) delivering.

h4. Over engineering.

I think that over engineering was probably the worst problem in those failed projects. It's even more dangerous than excessive planning
We expended so much time worrying about engineering problems and having a nice, clean, elegant architecture, that we forgot that delivery working code was the most important thing of all.

h4. Over planning.

Failing to apply YAGNI was probably the second worst sin. An unlimited number of features piled over another set of useless ones made the application over complicate and pretty much useless.

The funny thing is that with all those features, the end result didn't have what the users need it. So, the users asked for more and more features.

I notice that this happened when the sponsor of the project have no knowledge of the problem domain or over estimate his understanding of the customers.

h4. Under delivering.

I could blame under delivering to the previous two problems, and is surely related. But some times we under deliver because we don't communicate properly along the project.

It's usually pretty obvious when something is not going to get done.
Sometimes we work overtime and try to pull a few all nighters in what turns to be a death march.

We foul ourselves and think that we will get it done, and sometimes we do.

But that only hides the true, that our velocity is lower than our estimation and that we need to change our release plans accordingly. (Or change scope)

h3. Deliver on time and succeed.

The (known) conclusion is that delivering working software on time will increase your changes for success.

Sure, CI and Testing and TDD help you to not only deliver but to deliver what you intended.

__Today I won't even dream on writing code without some type of Integration server (or script) and I feel dirty when I don't use some type of Test first approach to design my application.__

At the same time, we need to understand that the product (the software) is what we are getting paid for and not the practices we utilize.
