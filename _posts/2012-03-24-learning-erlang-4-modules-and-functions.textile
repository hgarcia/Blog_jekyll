---
layout: post
title: Modules and functions, building block of a program.
summary: Erlang code is divided in modules. Each module contains attributes and functions.
categories: [Programming, Erlang]
published: false
---

__Note of caution. These are the notes I'm taking while learning the language. You are welcome to follow along and use them as a guide. Please make sure to double check everything and use more authoritative sources like the "Erlang language":http://www.erlang.org site__

h3. Functions.

In Erlang you group function together in modules (more on this later).
A function consist of a name a set of parenthesis (containing the arguments) and arrow and a body.

__"Arity":http://en.wikipedia.org/wiki/Arity You will the following see in the Erlang documentation: "lists:sort/1" to indicate the sort function in the lists module that takes 1 argument or "lists:sort/2" to indicate the sort function in the same module (lists) but taking 2 arguments.__

Like in most (all?) languages a function can contain zero or more arguments. The number of arguments indicates the "arity" of the function.

The name of the function is an atom and the name plus param plus argument plus arrow is called the head.

Here is where things start to getting a bit weird when compare to other languages you may be used to.

A function is defined as a set of clauses, each one with it's own head. Each clause is separate from the other using semicolons and you end the function definition with a stop.

It's similar to the use of the case statement.

The order of the clauses is important and you want to make sure to have your catch all clause as the last clause. By the way, is considered good practice to provide a catch all for your functions.

The pattern match is done on the arguments of the function. It will check number of arguments and them compare the arguments following the rules we saw in "Learning Erlang 3":http://blog.dynamicprogrammer.com/2012/03/19/learning-erlang-3-variables-comparisons-dynamic-typing.html

TODO: Write some functions here

h3. Modules, encapsulation and exports.

Modules are text files where we group the functions together, hopefully following some logical grouping. The name of the file have to be the same as the name of the module.

We name the module using the "module" directive.
Modules provide encapsulation since you need to explicity export the functions that you want the outside world to have access to.

__You may be familiar with some other similar module systems, like the commonjs modules used in node.js__

You do so using the export directive, it takes a list containing the function name and the arity. (name/arity)

TODO: Add some examples of modules and exports here

h3. Modules attributes.

h3. Compiling and running modules.
