---
layout: post
title: Mocking the world - TDD antipatern 101.
summary: 
categories: [Programming]
published: false
---

I don't think I ever wrote about this but I keep seeing Tests where the "arrange" mocks (or stub or double) so many internals of the system under test that it's really starting to get under my nerves.

I happen to see this a lot specially on Ruby projects and latelly node as well. I think is due to the lack of use of DI on this projects and that Ruby is so awesome that makes the abuse of Mocks very easy.

__I'm not saying that there is anythign wrong with Ruby. It's always us, the developers, who should make the call and do the right thing (or design the thing right).__

I think that this problem manifest in different ways.

h3. If you can't test without all that mocking, check the desing.

One of the (anti)patterns I see, is test(s) that run expectations on the internals of an object to verify behaviour. 
This is the case of methods that return nil or are considered to return void. It's the old, "How do I test this?" question.
In general, we should assert on the expected result. The result can be data returned or the state of an object changed. 

Even better, if you can return a new object with the new state. In most cases the performance penalty should be minimall.



