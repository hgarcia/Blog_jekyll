{"ts":1348493322681,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"---\nlayout: post\ntitle: Dynamic includes with Angular.js\nsummary: Take advantage of expression evaluations to dynamically change the includes in your views.\ncategories: [Programming, JavaScript]\npublished: false\n---\n\nIn \"a previous post\":http://blog.dynamicprogrammer.com/2012/09/10/using-includes-with-angular-js.html I show how to use includes to partition views. \n\nIn that example, I was using static includes that provide limited flexibility.\n\nWhat if you want to display different information on the same area of the template based on some condition?\n\nYou could use a conditional statement inside the include and render different code accordingly, but doing that will most likely result in bloated and difficult to maintain views.\n\nh3. One solution.\n\nYou can use expression evaluation to decide what include to show. In other words, you will be making the decision sooner and keeping your includes small and focused.\n\nThe following code declare a function in the controller that return the name of a partial. You can easily make different decissions in here.\n\n<pre><code>\nfunction AppCtrl ($scope) {\n    $scope.getPartial = function () {\n        return 'partials/issues.html';\n    }\n}\n</code></pre>\n\nIn the view you use the expression as the src for the include instead of a string.\n\n<pre><code>\n    <div data-ng-include data-ng-src=\"getPartial()\"></div>\n</code></pre>\n\nThis approach works ok but make the controller responsible on deciding what view to show, what is not a very good thing.\n\nh3. Conventions\n\nAnother approach is to use some convention to name your includes. Let's say that based in the status of a model you decide what inlude to show.\n\nYou could name you includes in a way that the status is part of the name.\n\nThis approach can be used to decide between multiple views easily.\n\n<pre><code>\nfunction IssueCtrl ($scope) {\n    $scope.issue = {\n        status: 'open'\n    };\n}\n</code></pre>\n\n<pre><code>\n    <div data-ng-include data-ng-src=\"'partials/' + issue.status + '.html'\"></div>\n</code></pre>\n\nIn the code above angular will look for a partial named <span class=\"code\">open.html</span> in the <span class=\"code\">partials</span> folder.\n"]],"start1":0,"start2":0,"length1":0,"length2":2164}]],"length":2164}
